/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ConnectionsRouteImport } from './routes/connections/route'
import { Route as ConnectRouteImport } from './routes/connect/route'
import { Route as IndexRouteImport } from './routes/index/route'
import { Route as DashboardLayoutImport } from './routes/dashboard/_layout'
import { Route as DashboardLayoutTableViewLayoutImport } from './routes/dashboard/_layout/_table-view-layout'
import { Route as DashboardLayoutSqlEditorRouteImport } from './routes/dashboard/_layout/sql-editor/route'
import { Route as DashboardLayoutKeybindingsRouteImport } from './routes/dashboard/_layout/keybindings/route'
import { Route as DashboardLayoutApiDocsRouteImport } from './routes/dashboard/_layout/api-docs/route'
import { Route as DashboardLayoutSettingsPreferencesRouteImport } from './routes/dashboard/_layout/settings/preferences/route'
import { Route as DashboardLayoutTableViewLayoutTableViewEmptyRouteImport } from './routes/dashboard/_layout/_table-view-layout/table-view/empty/route'
import { Route as DashboardLayoutTableViewLayoutTableViewTableNameRouteImport } from './routes/dashboard/_layout/_table-view-layout/table-view/$tableName/route'

// Create Virtual Routes

const DashboardImport = createFileRoute('/dashboard')()

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ConnectionsRouteRoute = ConnectionsRouteImport.update({
  path: '/connections',
  getParentRoute: () => rootRoute,
} as any)

const ConnectRouteRoute = ConnectRouteImport.update({
  path: '/connect',
  getParentRoute: () => rootRoute,
} as any)

const IndexRouteRoute = IndexRouteImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardLayoutRoute = DashboardLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardLayoutTableViewLayoutRoute =
  DashboardLayoutTableViewLayoutImport.update({
    id: '/_table-view-layout',
    getParentRoute: () => DashboardLayoutRoute,
  } as any)

const DashboardLayoutSqlEditorRouteRoute =
  DashboardLayoutSqlEditorRouteImport.update({
    path: '/sql-editor',
    getParentRoute: () => DashboardLayoutRoute,
  } as any)

const DashboardLayoutKeybindingsRouteRoute =
  DashboardLayoutKeybindingsRouteImport.update({
    path: '/keybindings',
    getParentRoute: () => DashboardLayoutRoute,
  } as any)

const DashboardLayoutApiDocsRouteRoute =
  DashboardLayoutApiDocsRouteImport.update({
    path: '/api-docs',
    getParentRoute: () => DashboardLayoutRoute,
  } as any)

const DashboardLayoutSettingsPreferencesRouteRoute =
  DashboardLayoutSettingsPreferencesRouteImport.update({
    path: '/settings/preferences',
    getParentRoute: () => DashboardLayoutRoute,
  } as any)

const DashboardLayoutTableViewLayoutTableViewEmptyRouteRoute =
  DashboardLayoutTableViewLayoutTableViewEmptyRouteImport.update({
    path: '/table-view/empty',
    getParentRoute: () => DashboardLayoutTableViewLayoutRoute,
  } as any)

const DashboardLayoutTableViewLayoutTableViewTableNameRouteRoute =
  DashboardLayoutTableViewLayoutTableViewTableNameRouteImport.update({
    path: '/table-view/$tableName',
    getParentRoute: () => DashboardLayoutTableViewLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/connect': {
      id: '/connect'
      path: '/connect'
      fullPath: '/connect'
      preLoaderRoute: typeof ConnectRouteImport
      parentRoute: typeof rootRoute
    }
    '/connections': {
      id: '/connections'
      path: '/connections'
      fullPath: '/connections'
      preLoaderRoute: typeof ConnectionsRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/_layout': {
      id: '/dashboard/_layout'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLayoutImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/_layout/api-docs': {
      id: '/dashboard/_layout/api-docs'
      path: '/api-docs'
      fullPath: '/dashboard/api-docs'
      preLoaderRoute: typeof DashboardLayoutApiDocsRouteImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/dashboard/_layout/keybindings': {
      id: '/dashboard/_layout/keybindings'
      path: '/keybindings'
      fullPath: '/dashboard/keybindings'
      preLoaderRoute: typeof DashboardLayoutKeybindingsRouteImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/dashboard/_layout/sql-editor': {
      id: '/dashboard/_layout/sql-editor'
      path: '/sql-editor'
      fullPath: '/dashboard/sql-editor'
      preLoaderRoute: typeof DashboardLayoutSqlEditorRouteImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/dashboard/_layout/_table-view-layout': {
      id: '/dashboard/_layout/_table-view-layout'
      path: ''
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLayoutTableViewLayoutImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/dashboard/_layout/settings/preferences': {
      id: '/dashboard/_layout/settings/preferences'
      path: '/settings/preferences'
      fullPath: '/dashboard/settings/preferences'
      preLoaderRoute: typeof DashboardLayoutSettingsPreferencesRouteImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/dashboard/_layout/_table-view-layout/table-view/$tableName': {
      id: '/dashboard/_layout/_table-view-layout/table-view/$tableName'
      path: '/table-view/$tableName'
      fullPath: '/dashboard/table-view/$tableName'
      preLoaderRoute: typeof DashboardLayoutTableViewLayoutTableViewTableNameRouteImport
      parentRoute: typeof DashboardLayoutTableViewLayoutImport
    }
    '/dashboard/_layout/_table-view-layout/table-view/empty': {
      id: '/dashboard/_layout/_table-view-layout/table-view/empty'
      path: '/table-view/empty'
      fullPath: '/dashboard/table-view/empty'
      preLoaderRoute: typeof DashboardLayoutTableViewLayoutTableViewEmptyRouteImport
      parentRoute: typeof DashboardLayoutTableViewLayoutImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRouteRoute,
  ConnectRouteRoute,
  ConnectionsRouteRoute,
  DashboardRoute: DashboardRoute.addChildren({
    DashboardLayoutRoute: DashboardLayoutRoute.addChildren({
      DashboardLayoutApiDocsRouteRoute,
      DashboardLayoutKeybindingsRouteRoute,
      DashboardLayoutSqlEditorRouteRoute,
      DashboardLayoutTableViewLayoutRoute:
        DashboardLayoutTableViewLayoutRoute.addChildren({
          DashboardLayoutTableViewLayoutTableViewTableNameRouteRoute,
          DashboardLayoutTableViewLayoutTableViewEmptyRouteRoute,
        }),
      DashboardLayoutSettingsPreferencesRouteRoute,
    }),
  }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/connect",
        "/connections",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index/route.tsx"
    },
    "/connect": {
      "filePath": "connect/route.tsx"
    },
    "/connections": {
      "filePath": "connections/route.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard",
      "children": [
        "/dashboard/_layout"
      ]
    },
    "/dashboard/_layout": {
      "filePath": "dashboard/_layout.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/_layout/api-docs",
        "/dashboard/_layout/keybindings",
        "/dashboard/_layout/sql-editor",
        "/dashboard/_layout/_table-view-layout",
        "/dashboard/_layout/settings/preferences"
      ]
    },
    "/dashboard/_layout/api-docs": {
      "filePath": "dashboard/_layout/api-docs/route.tsx",
      "parent": "/dashboard/_layout"
    },
    "/dashboard/_layout/keybindings": {
      "filePath": "dashboard/_layout/keybindings/route.tsx",
      "parent": "/dashboard/_layout"
    },
    "/dashboard/_layout/sql-editor": {
      "filePath": "dashboard/_layout/sql-editor/route.tsx",
      "parent": "/dashboard/_layout"
    },
    "/dashboard/_layout/_table-view-layout": {
      "filePath": "dashboard/_layout/_table-view-layout.tsx",
      "parent": "/dashboard/_layout",
      "children": [
        "/dashboard/_layout/_table-view-layout/table-view/$tableName",
        "/dashboard/_layout/_table-view-layout/table-view/empty"
      ]
    },
    "/dashboard/_layout/settings/preferences": {
      "filePath": "dashboard/_layout/settings/preferences/route.tsx",
      "parent": "/dashboard/_layout"
    },
    "/dashboard/_layout/_table-view-layout/table-view/$tableName": {
      "filePath": "dashboard/_layout/_table-view-layout/table-view/$tableName/route.tsx",
      "parent": "/dashboard/_layout/_table-view-layout"
    },
    "/dashboard/_layout/_table-view-layout/table-view/empty": {
      "filePath": "dashboard/_layout/_table-view-layout/table-view/empty/route.tsx",
      "parent": "/dashboard/_layout/_table-view-layout"
    }
  }
}
ROUTE_MANIFEST_END */
