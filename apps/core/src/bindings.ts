/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function closeSplashscreen() {
    return invoke()<null>("close_splashscreen")
}

export function testConnection(connString: string) {
    return invoke()<string>("test_connection", { connString })
}

export function createConnectionRecord(connString: string, connName: string, driver: Drivers) {
    return invoke()<null>("create_connection_record", { connString,connName,driver })
}

export function deleteConnectionRecord(connId: string) {
    return invoke()<null>("delete_connection_record", { connId })
}

export function establishConnection(connString: string, driver: Drivers) {
    return invoke()<null>("establish_connection", { connString,driver })
}

export function connectionsExist() {
    return invoke()<boolean>("connections_exist")
}

export function getConnections() {
    return invoke()<{ [key: string]: ConnConfig }>("get_connections")
}

export function getConnectionDetails(connId: string) {
    return invoke()<ConnConfig>("get_connection_details", { connId })
}

export function getTables() {
    return invoke()<string[]>("get_tables")
}

export function getPaginatedRows(tableName: string, pageIndex: number, pageSize: number) {
    return invoke()<PaginatedRows>("get_paginated_rows", { tableName,pageIndex,pageSize })
}

export function deleteRows(pkColName: string, rowPkValues: any[], tableName: string) {
    return invoke()<number>("delete_rows", { pkColName,rowPkValues,tableName })
}

export function getColumnsProps(tableName: string) {
    return invoke()<ColumnProps[]>("get_columns_props", { tableName })
}

export function createRow(tableName: string, data: { [key: string]: any }) {
    return invoke()<number>("create_row", { tableName,data })
}

export function updateRow(tableName: string, pkColName: string, pkColValue: any, data: { [key: string]: any }) {
    return invoke()<number>("update_row", { tableName,pkColName,pkColValue,data })
}

export function getFkRelations(tableName: string, columnName: string, cellValue: any) {
    return invoke()<FKRows[]>("get_fk_relations", { tableName,columnName,cellValue })
}

/**
 * Supported drivers, stored inside connection config in `connections.json`.
 */
export type Drivers = "sqlite" | "postgresql" | "mysql"
export type FKRows = { tableName: string; rows: { [key: string]: any }[] }
export type ColumnProps = { columnName: string; type: string; isNullable: boolean; defaultValue: any; isPK: boolean; hasFkRelations: boolean }
export type PaginatedRows = { data: { [key: string]: any }[]; pageCount: number }
/**
 * Connection Config Stored inside `connections.json` file
 */
export type ConnConfig = { driver: Drivers; connString: string; connName: string }
