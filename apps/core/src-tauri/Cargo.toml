[package]
name = "tablex"
version.workspace = true
description.workspace = true
license.workspace = true
repository.workspace = true
default-run = "tablex"
edition.workspace = true


# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[build-dependencies]
tauri-build = { version = "2.0.0-beta.19", features = [] }

[dependencies]
tx_lib = { path = "../../../crates/lib" }
tx_handlers = { path = "../../../crates/handlers" }
tx_keybindings = { path = "../../../crates/keybindings" }
tx_settings = { path = "../../../crates/settings" }
serde_json = { workspace = true }
serde = { workspace = true }
tauri = { workspace = true }
sqlx = { workspace = true }
clap = { version = "4.5.1", features = ["derive"] }
tokio = { workspace = true }
regex = "1.10.3"
specta = { workspace = true }
specta-typescript = "0.0.7"
tauri-specta = { workspace = true }
tauri-plugin-dialog = "2.2.2"
tauri-plugin-clipboard-manager = "2.2.2"
tauri-plugin-fs = { version = "2.3.0", features = ["watch"] }
tauri-plugin-shell = "2.2.1"
# NOTE: this should be optional but tauri can't yet offer a way
# to individually manipulate capabilites at runtime.
tauri-plugin-updater = "2.7.1"
json-patch = "2.0.0"
tauri-plugin-log = "2.4.0"
log = { workspace = true }
time = "0.3.36"
sea-schema = { workspace = true }
sea-query-binder = { workspace = true }
tauri-plugin-opener = "2.2.7"
sea-query = { workspace = true }
uuid = { workspace = true }

[features]
# this feature is used for production builds or when `devPath` points to the filesystem and the built-in dev server is disabled.
# If you use cargo directly instead of tauri's cli you can use this feature flag to switch between tauri's `dev` and `build` modes.
# DO NOT REMOVE!!
custom-protocol = ["tauri/custom-protocol"]
metax = []
updater = []

[target."cfg(windows)".dependencies]
windows = { version = "0.54.0", features = [
    "Win32_System_Console",
    "Win32_Foundation",
] }
