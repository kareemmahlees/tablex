import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger
} from "@/components/ui/sheet"

import { type ColumnInfo, commands, type RowRecord } from "@/bindings"
import { TooltipButton } from "@/components/custom/tooltip-button"
import { Button } from "@/components/ui/button"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from "@/components/ui/form"
import { ScrollArea } from "@/components/ui/scroll-area"
import { getZodSchemaFromCols } from "@/features/table-view/columns"
import { zodResolver } from "@hookform/resolvers/zod"
import { AlertCircle, PlusCircle } from "lucide-react"
import { Dispatch, SetStateAction, useMemo, useState } from "react"
import { useForm } from "react-hook-form"
import { useHotkeys } from "react-hotkeys-hook"
import { toast } from "sonner"
import { z } from "zod"
import { useTableSchema } from "../context"
import DynamicFormInput from "./dynamic-input"

export const AddRowSheet = () => {
  const [open, setOpen] = useState(false)

  useHotkeys("n", () => setOpen(true), {
    preventDefault: true,
    ignoreEventWhen: (e) =>
      e.target instanceof HTMLInputElement ||
      e.target instanceof HTMLTextAreaElement
  })

  return (
    <Sheet open={open} onOpenChange={setOpen}>
      <SheetTrigger>
        <TooltipButton
          size={"icon"}
          tooltipContent="Add Row"
          className="h-8 w-8"
        >
          <PlusCircle className="size-4" />
        </TooltipButton>
      </SheetTrigger>
      <SheetContent className="max-w-lg">
        <ScrollArea className="h-full">
          <SheetHeader className="bg-background sticky top-0 mb-4">
            <SheetTitle>Add new row</SheetTitle>
            <SheetDescription>
              Click Save to submit your changes.
            </SheetDescription>
          </SheetHeader>
          <AddRowForm setOpen={setOpen} />
        </ScrollArea>
      </SheetContent>
    </Sheet>
  )
}

const AddRowForm = ({
  setOpen
}: {
  setOpen: Dispatch<SetStateAction<boolean>>
}) => {
  const tableSchema = useTableSchema()
  const zodSchema = useMemo(
    () => getZodSchemaFromCols(tableSchema),
    [tableSchema]
  )
  const form = useForm<z.infer<NonNullable<typeof zodSchema>>>({
    resolver: zodResolver(zodSchema)
  })

  const onSubmit = async (values: z.infer<typeof zodSchema>) => {
    const vals: RowRecord[] = []
    for (const [key, value] of Object.entries(values)) {
      const column = tableSchema.columns.find((c) => c.name === key)!

      if (column.autoGenerated && value === undefined) continue

      vals.push({
        columnName: column.name,
        value: value === undefined ? null : value,
        columnType: column.type
      })
    }

    toast.promise(commands.createRow(tableSchema.name, vals), {
      loading: "Creating row...",
      success: () => {
        setOpen(false)
        return "Successfully created row"
      },
      error: (e) => e
    })
  }

  const renderInputDescription = (column: ColumnInfo) => {
    let description: string | null = null

    if (column.autoGenerated) {
      description = "This column is auto generated"
    }
    if (column.type === "binary" || column.type === "unSupported") {
      description = "Un-Supported data type"
    }

    return (
      description && (
        <FormDescription className="flex items-center gap-x-1">
          <AlertCircle className="mt-0.5 size-3" />
          {description}
        </FormDescription>
      )
    )
  }
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-5">
        {tableSchema.columns.map((column, idx) => (
          <FormField
            key={idx}
            control={form.control}
            name={column.name}
            render={({ field }) => (
              <FormItem className="flex flex-col px-1">
                <FormLabel>{column.name}</FormLabel>
                <FormControl>
                  <DynamicFormInput column={column} field={field} />
                </FormControl>
                {renderInputDescription(column)}
                <FormMessage />
              </FormItem>
            )}
          />
        ))}
        <div className="bg-background sticky bottom-0 space-x-4">
          <Button type="submit">Save</Button>
          <Button
            type="button"
            variant={"secondary"}
            onClick={() =>
              form.reset(
                {},
                {
                  keepValues: false
                }
              )
            }
          >
            Reset
          </Button>
        </div>
      </form>
    </Form>
  )
}
