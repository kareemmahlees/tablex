import { commands, RowRecord } from "@/bindings"
import { Button } from "@/components/ui/button"
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from "@/components/ui/form"
import { ScrollArea } from "@/components/ui/scroll-area"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle
} from "@/components/ui/sheet"
import { zodResolver } from "@hookform/resolvers/zod"
import { type Row } from "@tanstack/react-table"
import { Dispatch, SetStateAction, useEffect } from "react"
import { useForm } from "react-hook-form"
import { toast } from "sonner"
import { z } from "zod"
import { useTableSchema } from "../context"
import DynamicFormInput from "./dynamic-input"

interface EditRowSheetProps {
  row?: Row<any>
  setRow: Dispatch<SetStateAction<Row<any> | undefined>>
}

const EditRowSheet = ({ row, setRow }: EditRowSheetProps) => {
  const { tableSchema, zodSchema, pkCols } = useTableSchema()

  const form = useForm<z.infer<typeof zodSchema>>({
    resolver: zodResolver(zodSchema)
  })

  useEffect(() => {
    if (!row) return

    const formData = {}
    tableSchema.columns.forEach((col) => {
      const cellValue = row.getValue(col.name)
      formData[col.name] = cellValue === null ? undefined : cellValue
    })

    form.reset(formData)
  }, [row])

  if (!row) return null

  const onSubmit = async (values: z.infer<typeof zodSchema>) => {
    if (pkCols.length === 0)
      return toast.warning("No primary key defined for this table.")

    const vals: RowRecord[] = []
    for (const [key, value] of Object.entries(values)) {
      const column = tableSchema.columns.find((c) => c.name === key)!

      if (column.autoGenerated && value === undefined) continue

      vals.push({
        columnName: column.name,
        value: value === undefined ? null : value,
        columnType: column.type
      })
    }
    toast.promise(
      commands.updateRow(
        pkCols.map((col) => ({
          columnName: col.name,
          value: row.getValue(col.name),
          columnType: col.type
        })),
        tableSchema.name,
        vals
      ),
      {
        loading: "Updating row",
        success: () => {
          setRow(undefined)
          return "Successfully updated row"
        },
        error: (e) => {
          console.log(e)
          return ""
        }
      }
    )
  }

  return (
    <Sheet
      open={row !== undefined}
      onOpenChange={(open) => {
        if (open === false) {
          setRow(undefined)
        }
      }}
    >
      <SheetContent>
        <ScrollArea className="h-full">
          <SheetHeader className="bg-background sticky top-0 mb-4">
            <SheetTitle>Edit row</SheetTitle>
            <SheetDescription>
              Click Save to submit your changes.
            </SheetDescription>
          </SheetHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              {tableSchema.columns.map((column) => (
                <FormField
                  key={column.name}
                  control={form.control}
                  name={column.name}
                  render={({ field }) => (
                    <FormItem className="flex flex-col px-1">
                      <FormLabel>{column.name}</FormLabel>
                      <FormControl>
                        <DynamicFormInput
                          key={column.name}
                          column={column}
                          value={row.getValue(column.name)}
                          onChange={field.onChange}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              ))}
              <Button type="submit">Save</Button>
            </form>
          </Form>
        </ScrollArea>
      </SheetContent>
    </Sheet>
  )
}

export default EditRowSheet
